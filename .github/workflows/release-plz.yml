name: Release-plz

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2 # experimental
        with:
          workspaces: "subdir -> subdir/target"
      - name: Run release-plz
        id: release-plz
        uses: MarcoIeni/release-plz-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          project_manifest: subdir/Cargo.toml
          command: release-pr
      # - name: Read release output
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     RELEASES: ${{ steps.release-plz.outputs.releases }}
      #     PRS: ${{ steps.release-plz.outputs.prs }}
      #     PR: ${{ steps.release-plz.outputs.pr }}
      #     PRS_CREATED: ${{ steps.release-plz.outputs.prs_created }}
      #     RELEASES_CREATED: ${{ steps.release-plz.outputs.releases_created }}
      #   run: |
      #     set -e
      #     echo "releases: $RELEASES" # example: [{"package_name":"my-package","tag":"v0.1.0","version":"0.1.0"}]
      #     echo "prs: $PRS" # example: []
      #     echo "pr: $PR" # example: {}
      #     echo "prs_created: $PRS_CREATED" # example: true
      #     echo "releases_created: $RELEASES_CREATED" # example: true

      #     # get the number of releases with jq
      #     releases_length=$(echo "$RELEASES" | jq 'length')
      #     echo "releases_length: $releases_length"

      #     # access the first release with jq
      #     release_version=$(echo "$RELEASES" | jq -r '.[0].version')
      #     echo "release_version: $release_version"

      #     # access the first release with fromJSON. Docs: https://docs.github.com/en/actions/learn-github-actions/expressions
      #     echo "release_version: ${{ fromJSON(steps.release-plz.outputs.releases)[0].version }}"

      #     release_tag=$(echo "$RELEASES" | jq -r '.[0].tag')
      #     echo "release_tag: $release_tag"

      #     release_package_name=$(echo "$RELEASES" | jq -r '.[0].package_name')
      #     echo "release_package_name: $release_package_name"

      #     # print all names of released packages, one per line
      #     echo "package_names: $(echo "$RELEASES" | jq -r '.[].package_name')"
      #     # TODO: show how to store this in a variable and iterate over it (maybe an array?). PR welcome!

      #     # iterate over released packages
      #     for package_name in $(echo "$RELEASES" | jq -r '.[].package_name'); do
      #         echo "released $package_name"
      #     done

      #     echo "pr_number: ${{ fromJSON(steps.release-plz.outputs.pr).number }}"
      #     echo "pr_html_url: ${{ fromJSON(steps.release-plz.outputs.pr).html_url }}"
      #     echo "pr_head_branch: ${{ fromJSON(steps.release-plz.outputs.pr).head_branch }}"
      #     echo "pr_base_branch: ${{ fromJSON(steps.release-plz.outputs.pr).base_branch }}"

      #     # Iterate over released packages and add a label to the PRs
      #     # shipped with the release.
      #     for release in $(echo "$RELEASES" | jq -r -c '.[]'); do
      #         package_name=$(echo "$release" | jq -r '.package_name')
      #         version=$(echo "$release" | jq -r '.version')
      #         prs_length=$(echo "$release" | jq '.prs | length')
      #         if [ "$prs_length" -gt 0 ]; then
      #             # Create label.
      #             # Use `--force` to overwrite the label,
      #             # so that the command does not fail if the label already exists.
      #             label="released:$package_name-$version"
      #             gh label create $label --color BFD4F2 --force
      #             for pr in $(echo "$release" | jq -r -c '.prs[]'); do
      #                 pr_number=$(echo "$pr" | jq -r '.number')
      #                 echo "Adding label $label to PR #$pr_number"
      #                 gh pr edit $pr_number --add-label $label
      #             done
      #         else
      #             echo "No PRs found for package $package_name"
      #         fi
      #     done
